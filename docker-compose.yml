services:
  # API service
  app101apipy:
    container_name: app101apipy
    depends_on:
      app101postgres:
        condition: service_healthy
        required: true
    environment:
      APP_ENV: production
      DATABASE_URL: postgresql://app101:password@app101postgres:5432/app101db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    hostname: app101apipy
    image: app101/apipy:latest
    networks:
      app101_shared_network: null
    ports:
      - mode: ingress
        target: 5000
        published: 5000
        protocol: tcp
    restart: unless-stopped
  
  # Web application service
  app101web:
    container_name: app101web
    depends_on:
      app101apipy:
        condition: service_started
        required: true
      app101postgres:
        condition: service_healthy
        required: true
    environment:
      API_URL: http://localhost:5000
      PORT: 80
    hostname: app101web
    image: app101/web:latest
    ports:
      - mode: ingress
        target: 80
        published: 8080
        protocol: tcp
    networks:
      app101_shared_network: null
    restart: unless-stopped
  
  # PostgreSQL database service
  app101postgres:
    container_name: app101postgres
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgresdb
    hostname: app101postgres
    image: app101/postgres:latest
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready --dbname postgres --username app101postgres
      timeout: 10s
      interval: 30s
      retries: 5
    ports:
      - mode: ingress
        target: 5432
        published: 5432
        protocol: tcp
    networks:
      app101_shared_network: null
    restart: unless-stopped
    shm_size: "134217728"
    volumes:
      - type: volume
        source: app101_postgres_data
        target: /var/lib/postgresql/data
        volume: {}
  
  # Adminer service for database management
  adminer:
    container_name: adminer
    hostname: adminer
    image: adminer:5.1.0-standalone
    networks:
      app101_shared_network: null
    restart: unless-stopped
    ports:
      - "8081:8080"

  # sonarqube service:
  sonarqube:
    build:
      context: sonarqube
      dockerfile: Dockerfile
    container_name: sonarqube
    depends_on:
      app101postgres:
        condition: service_healthy
        required: true
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://app101postgres:5432/sonarqubedb
      SONAR_JDBC_USERNAME: sonarqube
      SONAR_JDBC_PASSWORD: password
    hostname: sonarqube
    image: app101/sonarqube:latest
    networks:
      app101_shared_network: null
    ports:
      - mode: ingress
        target: 9000
        published: 9000
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: volume
        source: sonarqube_data
        target: /opt/sonarqube/data
        volume: {}
      - type: volume
        source: sonarqube_extensions
        target: /opt/sonarqube/extensions
        volume: {}
      - type: volume
        source: sonarqube_logs
        target: /opt/sonarqube/logs

  # grafana:

  # prometheus:

  # jenkins service
  jenkins:
    container_name: jenkins
    build:
      context: jenkins
      dockerfile: Dockerfile
    environment:
      DOCKER_HOST: tcp://docker:2376 
      DOCKER_CERT_PATH: /certs/client 
      DOCKER_TLS_VERIFY: 1 
    depends_on:
      - dind
    hostname: jenkins
    image: app101/jenkins:latest
    networks:
      app101_shared_network: null
    ports:
      - mode: ingress
        target: 8080
        published: 8082
        protocol: tcp
    restart: unless-stopped
    volumes:
      - jenkins-data:/var/jenkins_home 
      - jenkins-docker-certs:/certs/client:ro 

  # dind service
  dind:
    container_name: dind
    hostname: dind
    image: docker:20.10.7-dind
    privileged: true
    networks:
      app101_shared_network: null
    ports:
      - mode: ingress
        target: 2375
        published: 2375
        protocol: tcp
    restart: unless-stopped
    volumes:
      - jenkins-docker-certs:/certs/client
      - jenkins-data:/var/jenkins_home
  
  # gitlab service
  gitlab:
    build:
      context: gitlab
      dockerfile: Dockerfile  
    container_name: gitlab
    environment:
      GITLAB_ROOT_PASSWORD: h0meL@b69
    hostname: gitlab
    image: app101/gitlab:latest
    ports:
      - 80:80
      - 443:443
      - 2222:22
    networks:
      app101_shared_network: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: gitlab_config
        target: /etc/gitlab
        volume: {}
      - type: volume
        source: gitlab_data
        target: /var/opt/gitlab
        volume: {}
      - type: volume
        source: gitlab_logs
        target: /var/log/gitlab
        volume: {}
 
  # elasticsearch:

  # logstash:

  # kibana:

  #mcpserver service
  mcpgitlab:
    build:
      context: mcpgitlab
      dockerfile: Dockerfile
      args:
        GITLAB_API_URL: http://gitlab/api/v4
        GITLAB_PERSONAL_ACCESS_TOKEN: ${GITLAB_PERSONAL_ACCESS_TOKEN:?}
    environment:
      GITLAB_API_URL: http://gitlab/api/v4
      GITLAB_PERSONAL_ACCESS_TOKEN: ${GITLAB_PERSONAL_ACCESS_TOKEN:?}
    image: app101/mcpgitlab:latest
    networks:
      app101_shared_network: null
    container_name: mcpgitlab
    hostname: mcpgitlab
    restart: always


volumes:
  app101_postgres_data:
  jenkins-data:
  jenkins-docker-certs:
  gitlab_logs:
  gitlab_data:
  gitlab_config:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

networks:
  app101_shared_network:
    name: app101_shared_network
    external: false